// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen --destination ../../mocks/tls_manager.go --package=mocks --source manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/serverscom/api-gateway-controller/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTLSManagerInterface is a mock of TLSManagerInterface interface.
type MockTLSManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTLSManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockTLSManagerInterfaceMockRecorder is the mock recorder for MockTLSManagerInterface.
type MockTLSManagerInterfaceMockRecorder struct {
	mock *MockTLSManagerInterface
}

// NewMockTLSManagerInterface creates a new mock instance.
func NewMockTLSManagerInterface(ctrl *gomock.Controller) *MockTLSManagerInterface {
	mock := &MockTLSManagerInterface{ctrl: ctrl}
	mock.recorder = &MockTLSManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSManagerInterface) EXPECT() *MockTLSManagerInterfaceMockRecorder {
	return m.recorder
}

// EnsureTLS mocks base method.
func (m *MockTLSManagerInterface) EnsureTLS(ctx context.Context, tlsInfo map[string]types.TLSConfigInfo) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTLS", ctx, tlsInfo)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureTLS indicates an expected call of EnsureTLS.
func (mr *MockTLSManagerInterfaceMockRecorder) EnsureTLS(ctx, tlsInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTLS", reflect.TypeOf((*MockTLSManagerInterface)(nil).EnsureTLS), ctx, tlsInfo)
}
