// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen --destination ../../mocks/lb_manager.go --package=mocks --source manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/serverscom/api-gateway-controller/internal/types"
	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockLBManagerInterface is a mock of LBManagerInterface interface.
type MockLBManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLBManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockLBManagerInterfaceMockRecorder is the mock recorder for MockLBManagerInterface.
type MockLBManagerInterfaceMockRecorder struct {
	mock *MockLBManagerInterface
}

// NewMockLBManagerInterface creates a new mock instance.
func NewMockLBManagerInterface(ctrl *gomock.Controller) *MockLBManagerInterface {
	mock := &MockLBManagerInterface{ctrl: ctrl}
	mock.recorder = &MockLBManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLBManagerInterface) EXPECT() *MockLBManagerInterfaceMockRecorder {
	return m.recorder
}

// DeleteLB mocks base method.
func (m *MockLBManagerInterface) DeleteLB(ctx context.Context, labelSelector string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLB", ctx, labelSelector)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLB indicates an expected call of DeleteLB.
func (mr *MockLBManagerInterfaceMockRecorder) DeleteLB(ctx, labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLB", reflect.TypeOf((*MockLBManagerInterface)(nil).DeleteLB), ctx, labelSelector)
}

// EnsureLB mocks base method.
func (m *MockLBManagerInterface) EnsureLB(ctx context.Context, gwInfo *types.GatewayInfo, hostCertMap map[string]string) (*serverscom.L7LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLB", ctx, gwInfo, hostCertMap)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureLB indicates an expected call of EnsureLB.
func (mr *MockLBManagerInterfaceMockRecorder) EnsureLB(ctx, gwInfo, hostCertMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLB", reflect.TypeOf((*MockLBManagerInterface)(nil).EnsureLB), ctx, gwInfo, hostCertMap)
}
